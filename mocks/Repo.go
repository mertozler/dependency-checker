// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/mertozler/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// GetAllKeys provides a mock function with given fields:
func (_m *Repo) GetAllKeys() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScanData provides a mock function with given fields: key
func (_m *Repo) GetScanData(key string) (*models.OutDatedData, error) {
	ret := _m.Called(key)

	var r0 *models.OutDatedData
	if rf, ok := ret.Get(0).(func(string) *models.OutDatedData); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OutDatedData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetScanData provides a mock function with given fields: key, value
func (_m *Repo) SetScanData(key string, value interface{}) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepo(t mockConstructorTestingTNewRepo) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
